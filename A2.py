class Node:
    def __init__(self,data,level,fval):
        self.data = data#data associated with node
        self.level = level#level of node (g(n))
        self.fval = fval#heuristic value (h(n))

    def generate_child(self):#generate child node based on current node.
        x,y = self.find(self.data,'_')# rows & columns of empty(_)
        val_list = [[x,y-1],[x,y+1],[x-1,y],[x+1,y]]#list containing coordinates of child nodes generated by moving empty space(_),done by add/sub 1 to current node.
        children = []#store generated child
        for i in val_list:
            child = self.shuffle(self.data,x,y,i[0],i[1])
            # The shuffle method is responsible for creating a new state by swapping the empty space with a neighboring tile. The result is stored in the child variable.
            if child is not None:#indicate valid moves
                child_node = Node(child,self.level+1,0)#possible move from current node
                children.append(child_node)#new child is appended to children list
        return children
        
    def shuffle(self,puz,x1,y1,x2,y2):#helper method used to create new state by swapping postion of two element
        #puz=current puzzle state x1 y1 x2 y2 coordinates of elements swapped
        if x2 >= 0 and x2 < len(self.data) and y2 >= 0 and y2 < len(self.data):#checking x2 y2 within valid range
            temp_puz = [] #create shallow copy of puzzle ,to not modify orginal puzzle state
            temp_puz = self.copy(puz)#-||-
            temp = temp_puz[x2][y2]
            temp_puz[x2][y2] = temp_puz[x1][y1]
            temp_puz[x1][y1] = temp
            return temp_puz
        else:
            return None
            

    def copy(self,root):#helper method use to create deep copy of given puzzle state,take root as input
        temp = []#empty list to store copied puzzle state
        for i in root:
            t = []
            for j in i:
                t.append(j)
            temp.append(t)
        return temp    
            
    def find(self,puz,x):
        for i in range(0,len(self.data)):
            for j in range(0,len(self.data)):
                if puz[i][j] == x:
                    return i,j


class Puzzle:
    def __init__(self,size):
        self.n = size
        self.open = []
        self.closed = []

    def accept(self):
        """ Accepts the puzzle from the user """
        puz = []
        for i in range(0,self.n):
            temp = input().split(" ")
            puz.append(temp)
        return puz

    def f(self,start,goal):
        """ Heuristic Function to calculate hueristic value f(x) = h(x) + g(x) """
        return self.h(start.data,goal)+start.level

    def h(self,start,goal):
        """ Calculates the different between the given puzzles """
        temp = 0
        for i in range(0,self.n):
            for j in range(0,self.n):
                if start[i][j] != goal[i][j] and start[i][j] != '_':
                    temp += 1
        return temp
        

    def process(self):
        """ Accept Start and Goal Puzzle state"""
        print("Enter the start state matrix \n")
        start = self.accept()
        print("Enter the goal state matrix \n")        
        goal = self.accept()

        start = Node(start,0,0)
        start.fval = self.f(start,goal)
        self.open.append(start)
        print("\n\n")
        while True:
            cur = self.open[0]
            print("")
            print("  | ")
            print("  | ")
            print(" \\\'/ \n")
            for i in cur.data:
                for j in i:
                    print(j,end=" ")
                print("")
            if(self.h(cur.data,goal) == 0):
                break
            for i in cur.generate_child():
                i.fval = self.f(i,goal)
                self.open.append(i)
            self.closed.append(cur)
            del self.open[0]

            self.open.sort(key = lambda x:x.fval,reverse=False)


puz = Puzzle(3)
puz.process()
s = input()